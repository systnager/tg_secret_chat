from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging

from business import *

load_dotenv()
logger = logging.getLogger(__name__)
IS_DEBUG = True if os.getenv('IS_DEBUG') == "True" else False
AUTHENTICATION_TOKEN = os.getenv('DEBUG_AUTHENTICATION_TOKEN') if IS_DEBUG else os.getenv('AUTHENTICATION_TOKEN')
room_code_blacklist = [None, 'None', 'none', '', 'NULL', 'null']


def escape_markdown(text):
    # Escape special characters for Markdown V2
    escape_table = {
        '_': r'\_',
        '*': r'\*',
        '[': r'\[',
        ']': r'\]',
        '(': r'\(',
        ')': r'\)',
        '~': r'\~',
        '`': r'\`',
        '>': r'\>',
        '#': r'\#',
        '+': r'\+',
        '-': r'\-',
        '=': r'\=',
        '|': r'\|',
        '{': r'\{',
        '}': r'\}',
        '.': r'\.',
        '!': r'\!'
    }

    # Replace special characters with their escaped counterparts
    escaped_text = ""
    if not text:
        return escaped_text
    for char in text:
        if char in escape_table:
            escaped_text += escape_table[char]
        else:
            escaped_text += char

    return escaped_text


class BotConfig:
    home_button = KeyboardButton(text='–ì–æ–ª–æ–≤–Ω–∞')

    week_days_button_list = [
        [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", callback_data="monday")],
        [InlineKeyboardButton(text="–í—ñ–≤—Ç–æ—Ä–æ–∫", callback_data="tuesday")],
        [InlineKeyboardButton(text="–°–µ—Ä–µ–¥–∞", callback_data="wednesday")],
        [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="thursday")],
        [InlineKeyboardButton(text="–ü'—è—Ç–Ω–∏—Ü—è", callback_data="friday")],
        [InlineKeyboardButton(text="–°—É–±–æ—Ç–∞", callback_data="saturday")],
        [InlineKeyboardButton(text="–ù–µ–¥—ñ–ª—è", callback_data="sunday")],
    ]

    next_week_days_button_list = [
        [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", callback_data="next_monday")],
        [InlineKeyboardButton(text="–í—ñ–≤—Ç–æ—Ä–æ–∫", callback_data="next_tuesday")],
        [InlineKeyboardButton(text="–°–µ—Ä–µ–¥–∞", callback_data="next_wednesday")],
        [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="next_thursday")],
        [InlineKeyboardButton(text="–ü'—è—Ç–Ω–∏—Ü—è", callback_data="next_friday")],
        [InlineKeyboardButton(text="–°—É–±–æ—Ç–∞", callback_data="next_saturday")],
        [InlineKeyboardButton(text="–ù–µ–¥—ñ–ª—è", callback_data="next_sunday")],
    ]

    week_day_keyboard_inline = InlineKeyboardMarkup(inline_keyboard=week_days_button_list)
    next_week_day_keyboard_inline = InlineKeyboardMarkup(inline_keyboard=next_week_days_button_list)
    back_builder = ReplyKeyboardBuilder()
    home_builder = ReplyKeyboardBuilder()
    admin_builder = ReplyKeyboardBuilder()
    cabinet_builder = ReplyKeyboardBuilder()
    exchange_builder = ReplyKeyboardBuilder()

    back_builder.row(
        home_button,
    )

    home_builder.row(
    )

    def __init__(self, database):
        self.dp = Dispatcher()
        self.bot = Bot(AUTHENTICATION_TOKEN)
        self.database = database
        self.router = Router()
        self.dp.include_router(self.router)

        @self.dp.message(CommandStart())
        async def command_start_handle(message):
            await self._command_start_handle(message)

        @self.dp.message()
        async def on_user_shared(message):
            await self._on_button_click(message)

        @self.router.callback_query()
        async def callback(callback_query):
            await self._callback(callback_query)

    async def start(self):
        await self.dp.start_polling(self.bot)

    async def _callback(self, callback_query):
        logger.info(f'user send callback id:{callback_query.message.chat.id} '
                    f'data:{callback_query.data} {datetime.datetime.now()}')
        user_action = {
            # 'monday': lambda: self.send_week_schedule(callback_query, 1),
        }

        if callback_query.data in user_action:
            await user_action[callback_query.data]()

    async def _on_button_click(self, message):
        user_id = message.from_user.id
        user = self.database.get_user(user_id)
        logger.info(f'user send callback id:{user_id} '
                    f'data:{message.text} {datetime.datetime.now()}')

        user_action = {
            # '–ì–æ–ª–æ–≤–Ω–∞': lambda: self.change_gr(message),
            '/change_room_code': lambda: self.change_room_code(message),
            'change_room_code': lambda: self.change_room_code_state(message),
        }

        admin_action = {
            # '–ê–¥–º—ñ–Ω–∫–∞': lambda: self.bot.send_message(message.chat.id, '–í–∏ –≤ –∞–¥–º—ñ–Ω—Ü—ñ',
            #                                         reply_markup=self.admin_builder.as_markup(resize_keyboard=True)),
        }

        if user:
            if message.text in user_action:
                await user_action[message.text]()
            elif user[1] in user_action:
                await user_action[user[1]]()
            elif user[2] == 'admin':
                user = self.database.get_user(user_id)
                user = user[0]
                if message.text in admin_action:
                    await admin_action[message.text]()
                elif user[1] in admin_action:
                    await admin_action[user[1]]()
            elif user[3] in room_code_blacklist:
                await self.bot.send_message(message.chat.id, f'–ß—É–¥—ñ–∫, –≤–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏')
            elif not user[3] in room_code_blacklist:
                users_list = self.database.get_users_by_room_code(user[3])
                users_list.remove(user)
                if message.content_type == 'photo':
                    for photo in message.photo:
                        file_id = photo.file_id
                        for user_ in users_list:
                            await self.bot.send_photo(user_[0], file_id)
                elif message.content_type == 'video':
                    file_id = message.video.file_id
                    for user_ in users_list:
                        await self.bot.send_video(user_[0], file_id)
                elif message.content_type == 'audio':
                    file_id = message.audio.file_id
                    for user_ in users_list:
                        await self.bot.send_audio(user_[0], file_id)
                elif message.content_type == 'voice':
                    file_id = message.voice.file_id
                    for user_ in users_list:
                        await self.bot.send_audio(user_[0], file_id)
                elif message.content_type == 'sticker':
                    file_id = message.sticker.file_id
                    for user_ in users_list:
                        await self.bot.send_sticker(user_[0], file_id)
                elif message.content_type == 'animation':
                    file_id = message.animation.file_id
                    for user_ in users_list:
                        await self.bot.send_animation(user_[0], file_id)
                elif message.content_type == 'document':
                    file_id = message.document.file_id
                    for user_ in users_list:
                        await self.bot.send_document(user_[0], file_id)
                elif message.content_type == 'text':
                    for user_ in users_list:
                        await self.bot.send_message(user_[0], f'||–•—Ç–æ—Å—å: {escape_markdown(message.text)}||',
                                                    parse_mode=ParseMode.MARKDOWN_V2)
                else:
                    await message.reply('–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É')
                    await message.reply(f'–¢–∏–ø –¥–∞–Ω–Ω–∏—Ö: {message.content_type}')

            await self.bot.set_message_reaction(message.chat.id,
                                                message.message_id,
                                                reaction=[{"type": "emoji", "emoji": "üëç"}])
        else:
            await self.bot.send_message(message.from_user.id, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')

    async def _command_start_handle(self, message):
        user_id = message.from_user.id
        user = self.database.get_user(user_id)
        await self.bot.send_message(user_id, f'–¶–µ–π —Ç–µ–∫—Å—Ç —á–∏—Å—Ç–æ –¥–ª—è —Ç–æ–≥–æ –∞–±–∏ —Ç–∏ —Ä–æ–∑—É–º—ñ–≤, —â–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î. '
                                             f'–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É –≤–≤–µ–¥–∏ /change_room_code',
                                    reply_markup=ReplyKeyboardRemove())
        if user:
            await self.bot.send_message(user_id, f'–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –í–≤–µ–¥–∏ /change_room_code —â–æ–± –∑–º—ñ–Ω–∏—Ç—å '
                                                 f'–∫—ñ–º–Ω–∞—Ç—É –∞–±–æ –∂ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —Ç–∏ –≤–∂–µ –≤ –∫—ñ–º–Ω–∞—Ç—ñ')
            return

        self.database.add_new_user(user_id)

    async def home(self, message):
        self.database.changer_user_state('default')
        await self.bot.send_message(message.chat.id, '–¢–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π')

    async def change_room_code(self, message):
        await self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—é–¥–∏ –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏, —É —è–∫—ñ–π —Ç–∏ —Ö–æ—á–µ—à —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å. '
                                                     '–ù–∞–∑–≤–∞ None, NULL —Ç–æ—â–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ (–ø–∏–Ω—è–π –Ω–∞ —Å–µ–±–µ)')
        self.database.changer_user_state(message.chat.id, 'change_room_code')

    async def change_room_code_state(self, message):
        await self.bot.send_message(message.chat.id, f'–¢–µ–ø–µ—Ä —Ç–∏ —Å–ø—ñ–ª–∫—É—î—à—Å—è —É –∫—ñ–º–Ω–∞—Ç—ñ –∑ –∫–æ–¥–æ–º: {message.text}\n'
                                                     f'–¢–µ–ø–µ—Ä –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–æ–Ω–∏ –Ω–∞–¥—ñ–π–¥—É—Ç—å —É—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º '
                                                     f'–∫—ñ–º–Ω–∞—Ç–∏. –¢–∞–∫–æ–∂ —Ç–∏ –±—É–¥–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥—Ä–∞–∑—É –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å—ñ—Ö'
                                                     f'—É—á–∞—Å–Ω–∏–∫—ñ–≤. –ü—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!')
        self.database.changer_user_state(message.chat.id, 'default')
        self.database.changer_user_room_code(message.chat.id, message.text)
        user_id = message.from_user.id
        user = self.database.get_user(user_id)
        users_list = self.database.get_users_by_room_code(user[3])
        users_list.remove(user)
        for user_ in users_list:
            await self.bot.send_message(user_[0], f'||–ë–û–¢: —É –Ω–∞—Å –Ω–æ–≤–∞ –ª—é–¥–∏–Ω–∞||',
                                        parse_mode=ParseMode.MARKDOWN_V2)
